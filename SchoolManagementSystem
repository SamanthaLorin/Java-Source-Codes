import java.util.*;

interface Schedulable {
    void viewSchedule();
}

abstract class Person implements Schedulable {
    private String name;
    private int age;
    private String email;

    public Person(String name, int age, String email) {
        this.name = name;
        this.age = age;
        this.email = email;
    }

    public String getName() { return name; }
    public int getAge() { return age; }
    public String getEmail() { return email; }

    public abstract void showRole();
}

class Student extends Person {
    private String studentID;
    private double gpa;
    private List<Course> courses;

    public Student(String name, int age, String email, String studentID, double gpa) {
        super(name, age, email);
        this.studentID = studentID;
        this.gpa = gpa;
        this.courses = new ArrayList<>();
    }

    public void enrollInCourse(Course course) {
        course.enrollStudent(this);
        courses.add(course);
    }

    public void viewSchedule() {
        System.out.println(getName() + "'s Schedule:");
        for (Course c : courses) {
            System.out.println("- " + c.getCourseName());
        }
    }

    public void showRole() {
        System.out.println(getName() + " is a student. GPA: " + gpa);
    }
}

class Teacher extends Person {
    private String employeeID;
    private String subject;

    public Teacher(String name, int age, String email, String employeeID, String subject) {
        super(name, age, email);
        this.employeeID = employeeID;
        this.subject = subject;
    }

    public void viewSchedule() {
        System.out.println(getName() + "'s Teaching Subject: " + subject);
    }

    public void showRole() {
        System.out.println(getName() + " is a teacher for " + subject);
    }
}

class Course {
    private String courseName;
    private String courseCode;
    private Teacher instructor;
    private List<Student> enrolledStudents;

    public Course(String courseName, String courseCode, Teacher instructor) {
        this.courseName = courseName;
        this.courseCode = courseCode;
        this.instructor = instructor;
        this.enrolledStudents = new ArrayList<>();
    }

    public String getCourseName() { return courseName; }

    public void enrollStudent(Student student) {
        enrolledStudents.add(student);
        System.out.println(student.getName() + " enrolled in " + courseName);
    }

    public void listEnrolledStudents() {
        System.out.println("Enrolled students in " + courseName + ":");
        for (Student s : enrolledStudents) {
            System.out.println("- " + s.getName());
        }
    }
}

public class SchoolApp {
    private static final Scanner sc = new Scanner(System.in);
    private static final List<Student> students = new ArrayList<>();
    private static final List<Teacher> teachers = new ArrayList<>();
    private static final List<Course> courses = new ArrayList<>();

    public static void main(String[] args) {
        boolean running = true;

        while (running) {
            System.out.println("\n== SCHOOL SYSTEM MENU ==");
            System.out.println("1. Add Student");
            System.out.println("2. Add Teacher");
            System.out.println("3. Create Course");
            System.out.println("4. Enroll Student in Course");
            System.out.println("5. View Student Schedule");
            System.out.println("6. List Students in Course");
            System.out.println("0. Exit");

            int choice = sc.nextInt();
            sc.nextLine(); // clear buffer

            switch (choice) {
                case 1 -> addStudent();
                case 2 -> addTeacher();
                case 3 -> createCourse();
                case 4 -> enrollStudentInCourse();
                case 5 -> viewStudentSchedule();
                case 6 -> listStudentsInCourse();
                case 0 -> running = false;
                default -> System.out.println("Invalid choice. Try again.");
            }
        }
    }

    private static void addStudent() {
        System.out.print("Name: ");
        String name = sc.nextLine();
        System.out.print("Age: ");
        int age = sc.nextInt(); sc.nextLine();
        System.out.print("Email: ");
        String email = sc.nextLine();
        System.out.print("Student ID: ");
        String id = sc.nextLine();
        System.out.print("GPA: ");
        double gpa = sc.nextDouble(); sc.nextLine();

        students.add(new Student(name, age, email, id, gpa));
        System.out.println("Student added!");
    }

    private static void addTeacher() {
        System.out.print("Name: ");
        String name = sc.nextLine();
        System.out.print("Age: ");
        int age = sc.nextInt(); sc.nextLine();
        System.out.print("Email: ");
        String email = sc.nextLine();
        System.out.print("Employee ID: ");
        String id = sc.nextLine();
        System.out.print("Subject: ");
        String subject = sc.nextLine();

        teachers.add(new Teacher(name, age, email, id, subject));
        System.out.println("Teacher added!");
    }

    private static void createCourse() {
        if (teachers.isEmpty()) {
            System.out.println("You need at least one teacher to create a course.");
            return;
        }

        System.out.print("Course Name: ");
        String name = sc.nextLine();
        System.out.print("Course Code: ");
        String code = sc.nextLine();

        System.out.println("Choose an instructor:");
        for (int i = 0; i < teachers.size(); i++) {
            System.out.println(i + ": " + teachers.get(i).getName());
        }

        int idx = sc.nextInt(); sc.nextLine();
        if (idx >= 0 && idx < teachers.size()) {
            courses.add(new Course(name, code, teachers.get(idx)));
            System.out.println("Course created!");
        } else {
            System.out.println("Invalid selection.");
        }
    }

    private static void enrollStudentInCourse() {
        if (students.isEmpty() || courses.isEmpty()) {
            System.out.println("You need students and courses to enroll.");
            return;
        }

        System.out.println("Select student:");
        for (int i = 0; i < students.size(); i++) {
            System.out.println(i + ": " + students.get(i).getName());
        }
        int sIdx = sc.nextInt(); sc.nextLine();

        System.out.println("Select course:");
        for (int i = 0; i < courses.size(); i++) {
            System.out.println(i + ": " + courses.get(i).getCourseName());
        }
        int cIdx = sc.nextInt(); sc.nextLine();

        if (validIndex(sIdx, students) && validIndex(cIdx, courses)) {
            students.get(sIdx).enrollInCourse(courses.get(cIdx));
        } else {
            System.out.println("Invalid selection.");
        }
    }

    private static void viewStudentSchedule() {
        if (students.isEmpty()) {
            System.out.println("No students yet.");
            return;
        }

        System.out.println("Select student:");
        for (int i = 0; i < students.size(); i++) {
            System.out.println(i + ": " + students.get(i).getName());
        }

        int idx = sc.nextInt(); sc.nextLine();
        if (validIndex(idx, students)) {
            students.get(idx).viewSchedule();
        } else {
            System.out.println("Invalid student.");
        }
    }

    private static void listStudentsInCourse() {
        if (courses.isEmpty()) {
            System.out.println("No courses yet.");
            return;
        }

        System.out.println("Select course:");
        for (int i = 0; i < courses.size(); i++) {
            System.out.println(i + ": " + courses.get(i).getCourseName());
        }

        int idx = sc.nextInt(); sc.nextLine();
        if (validIndex(idx, courses)) {
            courses.get(idx).listEnrolledStudents();
        } else {
            System.out.println("Invalid course.");
        }
    }

    private static <T> boolean validIndex(int index, List<T> list) {
        return index >= 0 && index < list.size();
    }
}