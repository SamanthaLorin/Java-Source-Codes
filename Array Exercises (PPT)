+++++++++++++++++++++++ Exercise 1 +++++++++++++++++++++++++++++++++
// OUTPUT

1
2
3
... (repeat until 100 numbers)

Average is: 50.5
Number of elements above the average: 50

// SOURCE CODE
package com.mycompany.arrayexercises;
import java.util.Scanner;
/**
 *
 * @author Samantha Lorin
 */
public class ArrayExercises {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in); 
        final int NUMBER_OF_ELEMENTS = 100;
        double[] numbers = new double[NUMBER_OF_ELEMENTS];
        double sum = 0;

        // Read numbers and calculate the sum
        for (int i = 0; i < NUMBER_OF_ELEMENTS; i++) {
            System.out.print("Enter a new number: ");
            numbers[i] = input.nextDouble();
            sum += numbers[i];
        }

        // Calculate the average
        double ave = sum / NUMBER_OF_ELEMENTS;

        // Count numbers above the average
        int count = 0;
        for (int i = 0; i < NUMBER_OF_ELEMENTS; i++) {
            if (numbers[i] > ave) {
                count++;
            }
        }

        // Output the results
        System.out.println("Average is: " + ave);
        System.out.println("Number of elements above the average: " + count);
    }
}

+++++++++++++++++++++++ Exercise 2 +++++++++++++++++++++++++++++++++

// OUTPUT
----- Passing Array to Method -----
x is 1
y[0] is 5555

----- Returning Array to Method -----
Original Array: 1 2 3 4 5 
Reversed Array: 5 4 3 2 1 

// SOURCE CODE

package com.mycompany.arrayinppts;
public class ArrayInPPTs {

    public static void main(String[] args) {
        
        // PASSING ARRAY TO METHOD
        System.out.println("----- Passing Array to Method -----");
        int x = 1;
        int[] y = new int[10];

        m(x, y);

        System.out.println("x is " + x);       // Outputs: x is 1
        System.out.println("y[0] is " + y[0]); // Outputs: y[0] is 5555

        // RETURNING ARRAY TO METHOD
        System.out.println("\n----- Returning Array to Method -----");
        int[] original = {1, 2, 3, 4, 5};
        int[] reversed = reverse(original);

        System.out.print("Original Array: ");
        for (int num : original) {
            System.out.print(num + " ");
        }

        System.out.println();

        System.out.print("Reversed Array: ");
        for (int num : reversed) {
            System.out.print(num + " ");
        }
    }

    // Method to demonstrate passing an array to a method
    public static void m(int number, int[] numbers) {
        number = 1001;       // Does not affect the original `x`
        numbers[0] = 5555;   // Modifies the first element of array `y`
    }

    // Method to demonstrate returning an array from a method
    public static int[] reverse(int[] list) {
        int[] result = new int[list.length];

        for (int i = 0, j = result.length - 1; i < list.length; i++, j--) {
            result[j] = list[i];
        }
        return result;
    }
}

+++++++++++++++++++++++ Exercise 3 +++++++++++++++++++++++++++++++++

// OUTPUT
Array elements: 
2 4 7 10 11 45 50 59 60 66 69 70 79 

Binary Search Results:
Index of 2: 0
Index of 11: 4
Index of 12: -6
Index of 1: -1
Index of 3: -2

// SOURCE CODE

// Declare and initialize the array
        int[] list = {2, 4, 7, 10, 11, 45, 50, 59, 60, 66, 69, 70, 79};

        // Display the array
        System.out.println("Array elements: ");
        displayArray(list);

        // Perform binary search and display results
        System.out.println("\nBinary Search Results:");
        System.out.println("Index of 2: " + BinarySearch.binarySearch(list, 2));
        System.out.println("Index of 11: " + BinarySearch.binarySearch(list, 11));
        System.out.println("Index of 12: " + BinarySearch.binarySearch(list, 12));
        System.out.println("Index of 1: " + BinarySearch.binarySearch(list, 1));
        System.out.println("Index of 3: " + BinarySearch.binarySearch(list, 3));
    }

    // Define a static nested class for BinarySearch
    public static class BinarySearch {

        public static int binarySearch(int[] list, int key) {
            int low = 0;
            int high = list.length - 1;

            while (high >= low) {
                int mid = (low + high) / 2;
                if (key < list[mid])
                    high = mid - 1;
                else if (key == list[mid])
                    return mid;
                else
                    low = mid + 1;
            }
            return -low - 1; // Key not found
        }
    }

    // Helper method to display the elements of an array
    public static void displayArray(int[] array) {
        for (int num : array) {
            System.out.print(num + " ");
        }
        System.out.println();
    }
}
